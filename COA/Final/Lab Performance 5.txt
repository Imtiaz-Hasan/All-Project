1.

.MODEL SMALL
 .STACK 100H

 .DATA
    A  DB  'Enter the Lower Case Letter : $\'
    B  DB  0DH,0AH,'The Upper Case Letter is : $\'

 .CODE
   MAIN PROC
     MOV AX, @DATA                
     MOV DS, AX

     LEA DX, A            
     MOV AH, 9
     INT 21H

     MOV AH, 1                   
     INT 21H

     MOV BL, AL                   

     LEA DX, B             
     MOV AH, 9
     INT 21H

     AND BL, 0DFH                 
                                 

     MOV AH, 2                    
     MOV DL, BL
     INT 21H

     MOV AH, 4CH                  
     INT 21H
   MAIN ENDP 
 END MAIN

2.
 .MODEL SMALL
 .STACK 100H

 .DATA
    A  DB  'Enter the Upper Case Letter : $\'
    B  DB  0DH,0AH,'The Lower Case Letter is : $\'

 .CODE
   MAIN PROC
     MOV AX, @DATA                
     MOV DS, AX

     LEA DX, A             
     MOV AH, 9
     INT 21H

     MOV AH, 1                    
     INT 21H

     MOV BL, AL                   

     LEA DX, B            
     MOV AH, 9
     INT 21H

     OR BL, 20H                   
                                  

     MOV AH, 2                   
     MOV DL, BL
     INT 21H

     MOV AH, 4CH                  
     INT 21H
   MAIN ENDP 
 END MAIN

3.

.MODEL SMALL
 .STACK 100H

 .DATA
   PROMPT_1  DB  'Enter the character : $'                                        
   PROMPT_2  DB  0DH,0AH,'The ASCII code of the given number in binary form is : $'
   PROMPT_3  DB  0DH,0AH,'The number of 1 bits in ASCII code are : $'

 .CODE
   MAIN PROC
     MOV AX, @DATA                  
     MOV DS, AX

     LEA DX, PROMPT_1               
     MOV AH, 9
     INT 21H

     MOV AH, 1                    
     INT 21H

     XOR BX, BX                   
     MOV BL, AL                   

     LEA DX, PROMPT_2             
     MOV AH, 9
     INT 21H

     XOR BH, BH                   
     MOV CX, 8                    
     MOV AH, 2                    

     @OUTPUT:                     
       SHL BL, 1                  

       JNC @ZERO                  
       INC BH                    
       MOV DL, 31H               
       JMP @DISPLAY               

       @ZERO:                     
         MOV DL, 30H              

       @DISPLAY:                 
         INT 21H                 
     LOOP @OUTPUT                

     LEA DX, PROMPT_3            
     MOV AH, 9
     INT 21H

     OR BH, 30H                  

     MOV AH, 2                   
     MOV DL, BH
     INT 21H

     MOV AH, 4CH                 
     INT 21H
   MAIN ENDP
 END MAIN

4.

.MODEL SMALL
.STACK 100H
.CODE
   MAIN PROC
   XOR BX,BX
   MOV AH,1
   INT 21H
   WHILE_:
   CMP AL,0DH
   JE END_WHILE
   AND AL,0FH
   SHL BX,1
   OR BL,AL  
   MOV AH,1
   INT 21H
   JMP WHILE_   
   
    END_WHILE: 
    MOV AH,2
       MOV DL,0DH
       INT 21H
       MOV DL,0AH
       INT 21H 
       MOV CX,16
       MOV AH,2
   
   OUTPUT:
   SHL BX,1
   JC ONE
   JNC ZERO
   
   ONE:
   MOV DL,'1'
   JMP DISPLAY
   
   ZERO:
   MOV DL,'0'
   JMP DISPLAY
   
   DISPLAY:
   MOV AH,2
   INT 21H  
   LOOP OUTPUT
   
  
   
    MAIN ENDP
 END MAIN

11.

.MODEL SMALL
 .STACK 100H

 .DATA
   A  DB  'Enter the binary number (max 8-bit) : $'
   B  DB  0DH,0AH,'The given binary number in reverse order is : $'

 .CODE
   MAIN PROC
     MOV AX, @DATA                  
     MOV DS, AX

     LEA DX, A            
     MOV AH, 9
     INT 21H

     XOR BL, BL                   
     MOV CX, 8                    
     MOV AH, 1                    

     @INPUT:                      
       INT 21H                    
       CMP AL, 0DH                
       JE @END                    
       AND AL, 0FH                
       SHL BL, 1                 
       OR BL, AL                 
     LOOP @INPUT               

     @END:                        

     MOV AL, BL                  
     MOV CX, 8                  

     @LOOP:                       
       SHL AL, 1                 
       RCR BL, 1                 
     LOOP @LOOP                   

     LEA DX, B             
     MOV AH, 9
     INT 21H

     MOV CX, 8                   
     MOV AH, 2                    

     @OUTPUT:                     
       SHL BL, 1                 

       JNC @ZERO                  
         MOV DL, 31H              
         JMP @DISPLAY             

       @ZERO:                     
         MOV DL, 30H              

       @DISPLAY:                 
         INT 21H                 
     LOOP @OUTPUT                 

     MOV AH, 4CH                  
     INT 21H
   MAIN ENDP
 END MAIN

14.

INCLUDE 'EMU8086.INC'
.MODEL SMALL
.STACK 100H
.CODE
MAIN PROC
   
    MOV BX,0
    MOV CL,4
    
    MOV AH,1
    
    FOR1:
    
    INT 21H
    CMP AL,0DH
    JE END_FOR
    
    CMP AL,41H
    JGE LETTER
    
    SUB AL,48
    JMP SHIFT
    
    LETTER:
    
    SUB AL,37H
    
    SHIFT:
    
    SHL BX,CL
    OR BL,AL
    JMP FOR1  
    
    END_FOR:
    
    PRINTN
                
    MOV CX,4
    MOV AH,2
    
    FOR2:
    
    MOV DL,BH
    SHR DL,4
    SHL BX,4
             
    CMP DL,10
    JGE LETTER2
    
    ADD DL,48
    INT 21H
    JMP END_OF_LOOP2
    
    LETTER2:
    
    ADD DL,55 
    INT 21H 
    
    END_OF_LOOP2:
    LOOP FOR2
    
    MOV AH,4CH
    INT 21H
    MAIN ENDP
END MAIN

15.

 .MODEL SMALL
 .STACK 100H

 .DATA
   A  DB  'Enter the hexadecimal number ( max 4-digit ) : $\'
   B  DB  0DH,0AH,'The equivalent 16-bit binary number is : $\'
   ILLEGAL   DB  0DH,0AH,'Illegal hex number. Try again : $\'

   COUNT     DB  ?

 .CODE
   MAIN PROC
     MOV AX, @DATA                
     MOV DS, AX

     LEA DX, A            
     MOV AH,9
     INT 21H

     JMP START                   

     START_1:                    
       LEA DX, ILLEGAL           
       MOV AH, 9
       INT 21H

     START:                      
       XOR BX, BX                 
       MOV COUNT, 30H             

     START_2:                    
       MOV AH, 1                  
       INT 21H                    

       CMP AL, 0DH               
       JNE SKIP                  

       CMP COUNT, 30H            
       JBE START_1               
       JMP END                   

       SKIP:                    

       CMP AL, "A"                
       JB DECIMAL                

       CMP AL, "F"                
       JA START_1                
       ADD AL, 9H               
       JMP OK                    

       DECIMAL:                 
         CMP AL, 30H             
         JB START_1             

         CMP AL, 39H              
         JA START_1             

       OK:                      

       INC COUNT                 

       AND AL, 0FH                

       MOV CL, 4                 
       SHL AL, CL                

       MOV CX, 4                 

       LOOP_1:                   
         SHL AL, 1               
         RCL BX, 1               
                                 
       LOOP LOOP_1              

      CMP COUNT, 34H              
      JE END                    
      JMP START_2                

     END:                       

     LEA DX, B            
     MOV AH, 9                    
     INT 21H

     MOV CX, 16                  
     MOV AH, 2                    

     LOOP_2:                     
       SHL BX, 1                 
       JC ONE                   
       MOV DL, 30H               
       JMP DISPLAY              

       ONE:                     
         MOV DL, 31H              

       DISPLAY:                 
         INT 21H                 
     LOOP LOOP_2                

     MOV AH, 4CH                 
     INT 21H
   MAIN ENDP
 END MAIN

